/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.zain.states.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.zain.states.model.Statess;
import com.liferay.training.zain.states.model.StatessModel;
import com.liferay.training.zain.states.model.StatessSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Statess service. Represents a row in the &quot;Zain_Statess&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StatessModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatessImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StatessImpl
 * @generated
 */
@JSON(strict = true)
public class StatessModelImpl
	extends BaseModelImpl<Statess> implements StatessModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a statess model instance should use the <code>Statess</code> interface instead.
	 */
	public static final String TABLE_NAME = "Zain_Statess";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.INTEGER},
		{"name", Types.VARCHAR}, {"country_id", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country_id", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Zain_Statess (uuid_ VARCHAR(75) null,id_ INTEGER not null primary key,name VARCHAR(75) null,country_id INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table Zain_Statess";

	public static final String ORDER_BY_JPQL = " ORDER BY statess.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Zain_Statess.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Statess toModel(StatessSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Statess model = new StatessImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setCountry_id(soapModel.getCountry_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Statess> toModels(StatessSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Statess> models = new ArrayList<Statess>(soapModels.length);

		for (StatessSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public StatessModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Statess.class;
	}

	@Override
	public String getModelClassName() {
		return Statess.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Statess, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Statess, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Statess, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Statess)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Statess, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Statess, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Statess)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Statess, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Statess, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Statess, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Statess, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Statess, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Statess, Object>>();
		Map<String, BiConsumer<Statess, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Statess, ?>>();

		attributeGetterFunctions.put("uuid", Statess::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Statess, String>)Statess::setUuid);
		attributeGetterFunctions.put("id", Statess::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<Statess, Integer>)Statess::setId);
		attributeGetterFunctions.put("name", Statess::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Statess, String>)Statess::setName);
		attributeGetterFunctions.put("country_id", Statess::getCountry_id);
		attributeSetterBiConsumers.put(
			"country_id", (BiConsumer<Statess, Integer>)Statess::setCountry_id);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_id = id;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public int getCountry_id() {
		return _country_id;
	}

	@Override
	public void setCountry_id(int country_id) {
		_country_id = country_id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Statess toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Statess>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StatessImpl statessImpl = new StatessImpl();

		statessImpl.setUuid(getUuid());
		statessImpl.setId(getId());
		statessImpl.setName(getName());
		statessImpl.setCountry_id(getCountry_id());

		statessImpl.resetOriginalValues();

		return statessImpl;
	}

	@Override
	public int compareTo(Statess statess) {
		int primaryKey = statess.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Statess)) {
			return false;
		}

		Statess statess = (Statess)object;

		int primaryKey = statess.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Statess> toCacheModel() {
		StatessCacheModel statessCacheModel = new StatessCacheModel();

		statessCacheModel.uuid = getUuid();

		String uuid = statessCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			statessCacheModel.uuid = null;
		}

		statessCacheModel.id = getId();

		statessCacheModel.name = getName();

		String name = statessCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			statessCacheModel.name = null;
		}

		statessCacheModel.country_id = getCountry_id();

		return statessCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Statess, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Statess, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Statess, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Statess)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Statess, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Statess, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Statess, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Statess)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Statess>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Statess.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private int _id;
	private String _name;
	private int _country_id;
	private long _columnBitmask;
	private Statess _escapedModel;

}