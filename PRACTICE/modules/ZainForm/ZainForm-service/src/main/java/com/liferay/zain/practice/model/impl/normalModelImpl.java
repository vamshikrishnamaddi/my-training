/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.zain.practice.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.zain.practice.model.normal;
import com.liferay.zain.practice.model.normalModel;
import com.liferay.zain.practice.model.normalSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the normal service. Represents a row in the &quot;Zain_normal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>normalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link normalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see normalImpl
 * @generated
 */
@JSON(strict = true)
public class normalModelImpl
	extends BaseModelImpl<normal> implements normalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a normal model instance should use the <code>normal</code> interface instead.
	 */
	public static final String TABLE_NAME = "Zain_normal";

	public static final Object[][] TABLE_COLUMNS = {
		{"sampleId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"name", Types.VARCHAR},
		{"catalog", Types.VARCHAR}, {"governorate", Types.VARCHAR},
		{"areazone", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sampleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("catalog", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("governorate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("areazone", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Zain_normal (sampleId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,catalog VARCHAR(75) null,governorate VARCHAR(75) null,areazone VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Zain_normal";

	public static final String ORDER_BY_JPQL = " ORDER BY normal.sampleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Zain_normal.sampleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GOVERNORATE_COLUMN_BITMASK = 1L;

	public static final long SAMPLEID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static normal toModel(normalSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		normal model = new normalImpl();

		model.setSampleId(soapModel.getSampleId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setCatalog(soapModel.getCatalog());
		model.setGovernorate(soapModel.getGovernorate());
		model.setAreazone(soapModel.getAreazone());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<normal> toModels(normalSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<normal> models = new ArrayList<normal>(soapModels.length);

		for (normalSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public normalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sampleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSampleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sampleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return normal.class;
	}

	@Override
	public String getModelClassName() {
		return normal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<normal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<normal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<normal, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((normal)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<normal, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<normal, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(normal)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<normal, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<normal, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<normal, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<normal, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<normal, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<normal, Object>>();
		Map<String, BiConsumer<normal, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<normal, ?>>();

		attributeGetterFunctions.put("sampleId", normal::getSampleId);
		attributeSetterBiConsumers.put(
			"sampleId", (BiConsumer<normal, Long>)normal::setSampleId);
		attributeGetterFunctions.put("groupId", normal::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<normal, Long>)normal::setGroupId);
		attributeGetterFunctions.put("companyId", normal::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<normal, Long>)normal::setCompanyId);
		attributeGetterFunctions.put("userId", normal::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<normal, Long>)normal::setUserId);
		attributeGetterFunctions.put("userName", normal::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<normal, String>)normal::setUserName);
		attributeGetterFunctions.put("createDate", normal::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<normal, Date>)normal::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", normal::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<normal, Date>)normal::setModifiedDate);
		attributeGetterFunctions.put("name", normal::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<normal, String>)normal::setName);
		attributeGetterFunctions.put("catalog", normal::getCatalog);
		attributeSetterBiConsumers.put(
			"catalog", (BiConsumer<normal, String>)normal::setCatalog);
		attributeGetterFunctions.put("governorate", normal::getGovernorate);
		attributeSetterBiConsumers.put(
			"governorate", (BiConsumer<normal, String>)normal::setGovernorate);
		attributeGetterFunctions.put("areazone", normal::getAreazone);
		attributeSetterBiConsumers.put(
			"areazone", (BiConsumer<normal, String>)normal::setAreazone);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSampleId() {
		return _sampleId;
	}

	@Override
	public void setSampleId(long sampleId) {
		_sampleId = sampleId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getCatalog() {
		if (_catalog == null) {
			return "";
		}
		else {
			return _catalog;
		}
	}

	@Override
	public void setCatalog(String catalog) {
		_catalog = catalog;
	}

	@JSON
	@Override
	public String getGovernorate() {
		if (_governorate == null) {
			return "";
		}
		else {
			return _governorate;
		}
	}

	@Override
	public void setGovernorate(String governorate) {
		_columnBitmask |= GOVERNORATE_COLUMN_BITMASK;

		if (_originalGovernorate == null) {
			_originalGovernorate = _governorate;
		}

		_governorate = governorate;
	}

	public String getOriginalGovernorate() {
		return GetterUtil.getString(_originalGovernorate);
	}

	@JSON
	@Override
	public String getAreazone() {
		if (_areazone == null) {
			return "";
		}
		else {
			return _areazone;
		}
	}

	@Override
	public void setAreazone(String areazone) {
		_areazone = areazone;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), normal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public normal toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, normal>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		normalImpl normalImpl = new normalImpl();

		normalImpl.setSampleId(getSampleId());
		normalImpl.setGroupId(getGroupId());
		normalImpl.setCompanyId(getCompanyId());
		normalImpl.setUserId(getUserId());
		normalImpl.setUserName(getUserName());
		normalImpl.setCreateDate(getCreateDate());
		normalImpl.setModifiedDate(getModifiedDate());
		normalImpl.setName(getName());
		normalImpl.setCatalog(getCatalog());
		normalImpl.setGovernorate(getGovernorate());
		normalImpl.setAreazone(getAreazone());

		normalImpl.resetOriginalValues();

		return normalImpl;
	}

	@Override
	public int compareTo(normal normal) {
		long primaryKey = normal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof normal)) {
			return false;
		}

		normal normal = (normal)object;

		long primaryKey = normal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_setModifiedDate = false;

		_originalGovernorate = _governorate;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<normal> toCacheModel() {
		normalCacheModel normalCacheModel = new normalCacheModel();

		normalCacheModel.sampleId = getSampleId();

		normalCacheModel.groupId = getGroupId();

		normalCacheModel.companyId = getCompanyId();

		normalCacheModel.userId = getUserId();

		normalCacheModel.userName = getUserName();

		String userName = normalCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			normalCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			normalCacheModel.createDate = createDate.getTime();
		}
		else {
			normalCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			normalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			normalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		normalCacheModel.name = getName();

		String name = normalCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			normalCacheModel.name = null;
		}

		normalCacheModel.catalog = getCatalog();

		String catalog = normalCacheModel.catalog;

		if ((catalog != null) && (catalog.length() == 0)) {
			normalCacheModel.catalog = null;
		}

		normalCacheModel.governorate = getGovernorate();

		String governorate = normalCacheModel.governorate;

		if ((governorate != null) && (governorate.length() == 0)) {
			normalCacheModel.governorate = null;
		}

		normalCacheModel.areazone = getAreazone();

		String areazone = normalCacheModel.areazone;

		if ((areazone != null) && (areazone.length() == 0)) {
			normalCacheModel.areazone = null;
		}

		return normalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<normal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<normal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<normal, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((normal)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<normal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<normal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<normal, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((normal)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, normal>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					normal.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _sampleId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _catalog;
	private String _governorate;
	private String _originalGovernorate;
	private String _areazone;
	private long _columnBitmask;
	private normal _escapedModel;

}